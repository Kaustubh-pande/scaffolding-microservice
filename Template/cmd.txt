package main

import (
	"context"

	log "github.com/sirupsen/logrus"
	"{provider-username}/{microservices}/config"
	"{provider-username}/{microservices}/repository"
	"{provider-username}/{microservices}/transport"
	handler "{provider-username}/{microservices}/usecase/handler"
	"{provider-username}/{microservices}/model"
	"{provider-username}/{microservices}/middleware"
)

func main() {
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	var conf config.Config
	conf := config.Load(conf)
	middleware.SetupLogrus(&conf.Logging)

	db, err := model.CreateConnection(&conf.Database)
	if err != nil {
		log.Fatalf("Could not connect to DB: %v", err)
	}
	defer db.Close()

	// {Name} repository
	repo := &repository.{Name}Repository{
		DB: db,
	}
	var {name}Service usecase.{Name}ServiceServer
	{name}Service = &handler.Service{
		Repo: repo,
		Conf: &conf,
	}

	serversDone := transport.Start(
		ctx,
		{name}Service,
		conf.GRPC,
		conf.RestGateway,
	)

	// Graceful shutdown.
	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt)
	<-c
	cancel()

	<-serversDone
}
