package transport

import(
	"context"
    "{provider-username}/{microservices}/config"
    handler "{provider-username}/{microservices}/usecase/handler"
    usecase "{provider-username}/{microservices}/usecase"//NOTE-if want replace string with usecase path.

)
func Start(
	ctx context.Context,
	service *handler.Service,
	grpcConfig config.GRPCConfig,
	restConfig config.RESTGatewayConfig,
) (closed <-chan struct{}) {
	grpcServer := startGrpcServer(ctx, service, grpcConfig)
	restServer := startRESTGateway(ctx, restConfig, grpcConfig.Address())

	done := make(chan struct{})
	go func() {
		<-ctx.Done()
		<-grpcServer
		<-restServer
		done <- struct{}{}
	}()
	return done
}

func startGrpcServer(ctx context.Context, service handler.Service, grpcConfig config.GRPCConfig) <-chan struct{} {
	setup := func(server *grpc.Server) {
		usecase.Register{Name}ServiceServer(server, service)
	}
	
	config := newGRPCConfig(
		grpcConfig.Host,
		grpcConfig.Port,
		grpcConfig.Protocol,
		[]grpc.ServerOption{
			middleware.StreamInterceptor(middleware.GetAllStream()...),
			middleware.UnaryInterceptor(middleware.GetAllUnary()...),
		},
	)
	return startGRPCServer(ctx, config, setup)
}

func startRESTGateway(ctx context.Context, restConfig config.RESTGatewayConfig, grpcAddress string) <-chan struct{} {
	setup := func(ctx context.Context, mux *runtime.ServeMux, opts []grpc.DialOption) error {
		return usecase.Register{Name}ServiceHandlerFromEndpoint(ctx, mux, grpcAddress, opts)
	}
	config := newConfigRestGateway(
		restConfig.Host,
		restConfig.Port,
		restConfig.Protocol,
		restConfig.GRPCPort,
		ConfigRESTGatewayJSONPb{
			OrigName:     false,
			EmitDefaults: true,
		},
	)
	return startHTTPRESTGateway(ctx, config, setup)
}
